// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package training

import (
	"sync"
)

// Ensure, that RegexRepositoryInterfaceMock does implement RegexRepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ RegexRepositoryInterface = &RegexRepositoryInterfaceMock{}

// RegexRepositoryInterfaceMock is a mock implementation of RegexRepositoryInterface.
//
// 	func TestSomethingThatUsesRegexRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked RegexRepositoryInterface
// 		mockedRegexRepositoryInterface := &RegexRepositoryInterfaceMock{
// 			GetAllRegexFunc: func() ([]Regex, error) {
// 				panic("mock out the GetAllRegex method")
// 			},
// 		}
//
// 		// use mockedRegexRepositoryInterface in code that requires RegexRepositoryInterface
// 		// and then make assertions.
//
// 	}
type RegexRepositoryInterfaceMock struct {
	// GetAllRegexFunc mocks the GetAllRegex method.
	GetAllRegexFunc func() ([]Regex, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllRegex holds details about calls to the GetAllRegex method.
		GetAllRegex []struct {
		}
	}
	lockGetAllRegex sync.RWMutex
}

// GetAllRegex calls GetAllRegexFunc.
func (mock *RegexRepositoryInterfaceMock) GetAllRegex() ([]Regex, error) {
	if mock.GetAllRegexFunc == nil {
		panic("RegexRepositoryInterfaceMock.GetAllRegexFunc: method is nil but RegexRepositoryInterface.GetAllRegex was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllRegex.Lock()
	mock.calls.GetAllRegex = append(mock.calls.GetAllRegex, callInfo)
	mock.lockGetAllRegex.Unlock()
	return mock.GetAllRegexFunc()
}

// GetAllRegexCalls gets all the calls that were made to GetAllRegex.
// Check the length with:
//     len(mockedRegexRepositoryInterface.GetAllRegexCalls())
func (mock *RegexRepositoryInterfaceMock) GetAllRegexCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllRegex.RLock()
	calls = mock.calls.GetAllRegex
	mock.lockGetAllRegex.RUnlock()
	return calls
}
